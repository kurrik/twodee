!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Add	geometry.go	/^func (r Rectangle) Add(p Point) Rectangle {$/;"	d
AddChild	scene.go	/^func (e *Element) AddChild(node Node) {$/;"	d
Bind	opengl.go	/^func (fb *Framebuffer) Bind() {$/;"	d
Bind	twodee.go	/^func (t *Texture) Bind() {$/;"	d
Bounds	scene.go	/^func (e *Element) Bounds() Rectangle {$/;"	d
ByDepth	scene.go	/^type ByDepth []Node$/;"	d
Camera	camera.go	/^type Camera struct {$/;"	d
Clear	scene.go	/^func (e *Element) Clear() {$/;"	d
CollidesWith	sprite.go	/^func (s *Sprite) CollidesWith(sprite *Sprite) bool {$/;"	d
Dispose	opengl.go	/^func (fb *Framebuffer) Dispose() {$/;"	d
Dispose	twodee.go	/^func (t *Texture) Dispose() {$/;"	d
Draw	opengl.go	/^func (fb *Framebuffer) Draw(w int, h int) {$/;"	d
Draw	scene.go	/^func (e *Element) Draw() {$/;"	d
Draw	scene.go	/^func (s *Scene) Draw() {$/;"	d
Draw	sprite.go	/^func (s *Sprite) Draw() {$/;"	d
Dx	geometry.go	/^func (r Rectangle) Dx() float64 {$/;"	d
Dy	geometry.go	/^func (r Rectangle) Dy() float64 {$/;"	d
Element	scene.go	/^type Element struct {$/;"	d
EncodeTGA	image.go	/^func EncodeTGA(name string, img image.Image) (buf *bytes.Buffer, err error) {$/;"	d
Env	scene.go	/^type Env struct {$/;"	d
EnvBlock	scene.go	/^type EnvBlock struct {$/;"	d
EnvBlockLoadedHandler	scene.go	/^type EnvBlockLoadedHandler func(block *EnvBlock, sprite *Sprite, x float64, y float64)$/;"	d
EnvOpts	scene.go	/^type EnvOpts struct {$/;"	d
Framebuffer	opengl.go	/^type Framebuffer struct {$/;"	d
GetAllChildren	scene.go	/^func (e *Element) GetAllChildren() []Node {$/;"	d
GetGLTexture	opengl.go	/^func GetGLTexture(img image.Image, smoothing int) (gltexture gl.Texture, err error) {$/;"	d
GlobalBounds	scene.go	/^func (e *Element) GlobalBounds() Rectangle {$/;"	d
Height	scene.go	/^func (e *Element) Height() float64 {$/;"	d
Init	twodee.go	/^func Init() (sys *System, err error) {$/;"	d
Key	twodee.go	/^func (s *System) Key(key int) int {$/;"	d
Len	scene.go	/^func (s ByDepth) Len() int {$/;"	d
Less	scene.go	/^func (s ByDepth) Less(i int, j int) bool {$/;"	d
Load	scene.go	/^func (e *Env) Load(system *System, opts EnvOpts) (err error) {$/;"	d
LoadPNG	twodee.go	/^func LoadPNG(path string) (img image.Image, err error) {$/;"	d
LoadTexture	twodee.go	/^func (s *System) LoadTexture(name string, path string, inter int, width int) (err error) {$/;"	d
LoadTexture	twodee.go	/^func LoadTexture(path string, smoothing int, framewidth int) (texture *Texture, err error) {$/;"	d
LoadVarWidthTexture	twodee.go	/^func LoadVarWidthTexture(path string, smoothing int) (texture *Texture, err error) {$/;"	d
MatchRatio	camera.go	/^func (c *Camera) MatchRatio(win *Window) {$/;"	d
Move	scene.go	/^func (e *Element) Move(p Point) {$/;"	d
MoveTo	scene.go	/^func (e *Element) MoveTo(p Point) {$/;"	d
NewCamera	camera.go	/^func NewCamera(x float64, y float64, w float64, h float64) *Camera {$/;"	d
NewFramebuffer	opengl.go	/^func NewFramebuffer(w int, h int) (fb *Framebuffer, err error) {$/;"	d
NewSprite	sprite.go	/^func (s *System) NewSprite(name string, x float64, y float64, w int, h int, t int) *Sprite {$/;"	d
NewText	scene.go	/^func (s *System) NewText(name string, x float64, y float64, r int, text string) *Text {$/;"	d
Node	scene.go	/^type Node interface {$/;"	d
Open	twodee.go	/^func (s *System) Open(win *Window) (err error) {$/;"	d
Opened	twodee.go	/^func (w *Window) Opened() bool {$/;"	d
Overlaps	geometry.go	/^func (r Rectangle) Overlaps(s Rectangle) bool {$/;"	d
Paint	twodee.go	/^func (s *System) Paint(scene *Scene) {$/;"	d
Parent	scene.go	/^func (e *Element) Parent() Node {$/;"	d
Point	geometry.go	/^type Point struct {$/;"	d
Pt	geometry.go	/^func Pt(x float64, y float64) Point {$/;"	d
Rect	geometry.go	/^func Rect(x1 float64, y1 float64, x2 float64, y2 float64) Rectangle {$/;"	d
Rectangle	geometry.go	/^type Rectangle struct {$/;"	d
RelativeBounds	scene.go	/^func (e *Element) RelativeBounds(n Node) Rectangle {$/;"	d
RemoveChild	scene.go	/^func (e *Element) RemoveChild(node Node) {$/;"	d
Round	scene.go	/^func Round(a float64) float64 {$/;"	d
Scene	scene.go	/^type Scene struct {$/;"	d
SetBounds	scene.go	/^func (e *Element) SetBounds(r Rectangle) {$/;"	d
SetCharCallback	twodee.go	/^func (s *System) SetCharCallback(handler glfw.CharHandler) {$/;"	d
SetClearColor	twodee.go	/^func (s *System) SetClearColor(r int, g int, b int, a int) {$/;"	d
SetFrame	sprite.go	/^func (s *Sprite) SetFrame(frame int) {$/;"	d
SetHeight	scene.go	/^func (e *Element) SetHeight(h float64) {$/;"	d
SetKeyCallback	twodee.go	/^func (s *System) SetKeyCallback(handler glfw.KeyHandler) {$/;"	d
SetParent	scene.go	/^func (e *Element) SetParent(node Node) {$/;"	d
SetProjection	camera.go	/^func (c *Camera) SetProjection() {$/;"	d
SetText	scene.go	/^func (t *Text) SetText(text string) {$/;"	d
SetWidth	scene.go	/^func (e *Element) SetWidth(w float64) {$/;"	d
SetZ	scene.go	/^func (e *Element) SetZ(z float64) {$/;"	d
Size	geometry.go	/^func (r Rectangle) Size() Point {$/;"	d
Sprite	sprite.go	/^type Sprite struct {$/;"	d
Sub	geometry.go	/^func (r Rectangle) Sub(p Point) Rectangle {$/;"	d
Swap	scene.go	/^func (s ByDepth) Swap(i int, j int) {$/;"	d
System	twodee.go	/^type System struct {$/;"	d
Terminate	twodee.go	/^func (s *System) Terminate() {$/;"	d
TestMove	sprite.go	/^func (s *Sprite) TestMove(dx float64, dy float64, r *Sprite) bool {$/;"	d
Text	scene.go	/^type Text struct {$/;"	d
Texture	twodee.go	/^type Texture struct {$/;"	d
Unbind	twodee.go	/^func (t *Texture) Unbind() {$/;"	d
Width	scene.go	/^func (e *Element) Width() float64 {$/;"	d
Window	twodee.go	/^type Window struct {$/;"	d
X	scene.go	/^func (e *Element) X() float64 {$/;"	d
Y	scene.go	/^func (e *Element) Y() float64 {$/;"	d
Z	scene.go	/^func (e *Element) Z() float64 {$/;"	d
clamp	twodee.go	/^func (s *System) clamp(i int, max int) gl.GLclampf {$/;"	d
data	opengl.go	/^	var data *bytes.Buffer$/;"	d
file	twodee.go	/^	var file *os.File$/;"	d
resize	twodee.go	/^func (s *System) resize() (err error) {$/;"	d
texture	twodee.go	/^	var texture *Texture$/;"	d
