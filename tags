!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Add	geometry.go	/^func (r Rectangle) Add(p Point) Rectangle {$/;"	d
AddChild	element.go	/^func (e *Element) AddChild(node Node) {$/;"	d
Bind	framebuffer.go	/^func (fb *Framebuffer) Bind() {$/;"	d
Bind	texture.go	/^func (t *Texture) Bind() {$/;"	d
Bottom	camera.go	/^func (c *Camera) Bottom(y float64) {$/;"	d
Bounds	camera.go	/^func (c *Camera) Bounds() Rectangle {$/;"	d
Bounds	element.go	/^func (e *Element) Bounds() Rectangle {$/;"	d
ByDepth	scene.go	/^type ByDepth []Node$/;"	d
Camera	camera.go	/^type Camera struct {$/;"	d
CharHandler	system.go	/^type CharHandler func(key int, state int)$/;"	d
Clear	element.go	/^func (e *Element) Clear() {$/;"	d
CloseHandler	system.go	/^type CloseHandler func() int$/;"	d
CollidesWith	sprite.go	/^func (s *Sprite) CollidesWith(sprite *Sprite) bool {$/;"	d
Dispose	framebuffer.go	/^func (fb *Framebuffer) Dispose() {$/;"	d
Dispose	texture.go	/^func (t *Texture) Dispose() {$/;"	d
Draw	element.go	/^func (e *Element) Draw() {$/;"	d
Draw	framebuffer.go	/^func (fb *Framebuffer) Draw(w int, h int) {$/;"	d
Draw	map.go	/^func (m *Map) Draw() {$/;"	d
Draw	scene.go	/^func (s *Scene) Draw() {$/;"	d
Draw	sprite.go	/^func (s *Sprite) Draw() {$/;"	d
Dx	geometry.go	/^func (r Rectangle) Dx() float64 {$/;"	d
Dy	geometry.go	/^func (r Rectangle) Dy() float64 {$/;"	d
Element	element.go	/^type Element struct {$/;"	d
EncodeTGA	image.go	/^func EncodeTGA(name string, img image.Image) (buf *bytes.Buffer, err error) {$/;"	d
Env	scene.go	/^type Env struct {$/;"	d
EnvBlock	scene.go	/^type EnvBlock struct {$/;"	d
EnvBlockLoadedHandler	scene.go	/^type EnvBlockLoadedHandler func(block *EnvBlock, sprite *Sprite, x float64, y float64)$/;"	d
EnvOpts	scene.go	/^type EnvOpts struct {$/;"	d
Font	text.go	/^type Font struct {$/;"	d
Framebuffer	framebuffer.go	/^type Framebuffer struct {$/;"	d
GetAllChildren	element.go	/^func (e *Element) GetAllChildren() []Node {$/;"	d
GetGLTexture	texture.go	/^func GetGLTexture(img image.Image, smoothing int) (gltexture gl.Texture, err error) {$/;"	d
GlobalBounds	element.go	/^func (e *Element) GlobalBounds() Rectangle {$/;"	d
Height	element.go	/^func (e *Element) Height() float64 {$/;"	d
In	geometry.go	/^func (r Rectangle) In(s Rectangle) bool {$/;"	d
Init	system.go	/^func Init() (sys *System, err error) {$/;"	d
Key	system.go	/^func (s *System) Key(key int) int {$/;"	d
KeyHandler	system.go	/^type KeyHandler func(key int, state int)$/;"	d
Len	scene.go	/^func (s ByDepth) Len() int {$/;"	d
Less	scene.go	/^func (s ByDepth) Less(i int, j int) bool {$/;"	d
Load	scene.go	/^func (e *Env) Load(system *System, opts EnvOpts) (err error) {$/;"	d
LoadFont	text.go	/^func LoadFont(path string, scale int32) (font *Font, err error) {$/;"	d
LoadPNG	texture.go	/^func LoadPNG(path string) (img image.Image, err error) {$/;"	d
LoadTexture	system.go	/^func (s *System) LoadTexture(name string, path string, inter int, width int) (err error) {$/;"	d
LoadTexture	texture.go	/^func LoadTexture(path string, smoothing int, framewidth int) (texture *Texture, err error) {$/;"	d
LoadTiledMap	map.go	/^func LoadTiledMap(system *System, path string) (m *Map, err error) {$/;"	d
LoadVarWidthTexture	texture.go	/^func LoadVarWidthTexture(path string, smoothing int) (texture *Texture, err error) {$/;"	d
Map	map.go	/^type Map struct {$/;"	d
MatchRatio	camera.go	/^func (c *Camera) MatchRatio(width int, height int) {$/;"	d
Move	element.go	/^func (e *Element) Move(p Point) {$/;"	d
MoveTo	element.go	/^func (e *Element) MoveTo(p Point) {$/;"	d
NewCamera	camera.go	/^func NewCamera(x float64, y float64, w float64, h float64) (c *Camera) {$/;"	d
NewFramebuffer	framebuffer.go	/^func NewFramebuffer(w int, h int) (fb *Framebuffer, err error) {$/;"	d
NewSprite	sprite.go	/^func (s *System) NewSprite(name string, x float64, y float64, w int, h int, t int) *Sprite {$/;"	d
NewText	scene.go	/^func (s *System) NewText(name string, x float64, y float64, r int, text string) *Text {$/;"	d
Node	scene.go	/^type Node interface {$/;"	d
Open	system.go	/^func (s *System) Open(win *Window) (err error) {$/;"	d
Opened	window.go	/^func (w *Window) Opened() bool {$/;"	d
Overlaps	geometry.go	/^func (r Rectangle) Overlaps(s Rectangle) bool {$/;"	d
Paint	system.go	/^func (s *System) Paint(scene *Scene) {$/;"	d
Pan	camera.go	/^func (c *Camera) Pan(x float64, y float64) {$/;"	d
Parent	element.go	/^func (e *Element) Parent() Node {$/;"	d
Point	geometry.go	/^type Point struct {$/;"	d
PrintError	examples/basic/main.go	/^func PrintError(err error) {$/;"	d
Printf	text.go	/^func (f *Font) Printf(x float64, y float64, format string, a ...interface{}) (err error) {$/;"	d
Pt	geometry.go	/^func Pt(x float64, y float64) Point {$/;"	d
Rect	geometry.go	/^func Rect(x1 float64, y1 float64, x2 float64, y2 float64) Rectangle {$/;"	d
Rectangle	geometry.go	/^type Rectangle struct {$/;"	d
RelativeBounds	element.go	/^func (e *Element) RelativeBounds(n Node) Rectangle {$/;"	d
RemoveChild	element.go	/^func (e *Element) RemoveChild(node Node) {$/;"	d
Round	scene.go	/^func Round(a float64) float64 {$/;"	d
Scene	scene.go	/^type Scene struct {$/;"	d
ScrollHandler	system.go	/^type ScrollHandler func(pos int)$/;"	d
SetBounds	element.go	/^func (e *Element) SetBounds(r Rectangle) {$/;"	d
SetCharCallback	system.go	/^func (s *System) SetCharCallback(handler CharHandler) {$/;"	d
SetClearColor	system.go	/^func (s *System) SetClearColor(r int, g int, b int, a int) {$/;"	d
SetCloseCallback	system.go	/^func (s *System) SetCloseCallback(handler CloseHandler) {$/;"	d
SetFrame	sprite.go	/^func (s *Sprite) SetFrame(frame int) {$/;"	d
SetHeight	element.go	/^func (e *Element) SetHeight(h float64) {$/;"	d
SetKeyCallback	system.go	/^func (s *System) SetKeyCallback(handler KeyHandler) {$/;"	d
SetLimits	camera.go	/^func (c *Camera) SetLimits(limits Rectangle) {$/;"	d
SetParent	element.go	/^func (e *Element) SetParent(node Node) {$/;"	d
SetProjection	camera.go	/^func (c *Camera) SetProjection() {$/;"	d
SetScrollCallback	system.go	/^func (s *System) SetScrollCallback(handler ScrollHandler) {$/;"	d
SetSizeCallback	system.go	/^func (s *System) SetSizeCallback(handler SizeHandler) {$/;"	d
SetText	scene.go	/^func (t *Text) SetText(text string) {$/;"	d
SetWidth	element.go	/^func (e *Element) SetWidth(w float64) {$/;"	d
SetZ	element.go	/^func (e *Element) SetZ(z float64) {$/;"	d
Size	geometry.go	/^func (r Rectangle) Size() Point {$/;"	d
SizeHandler	system.go	/^type SizeHandler func(w int, h int)$/;"	d
Sprite	sprite.go	/^type Sprite struct {$/;"	d
Sub	geometry.go	/^func (r Rectangle) Sub(p Point) Rectangle {$/;"	d
Swap	scene.go	/^func (s ByDepth) Swap(i int, j int) {$/;"	d
System	system.go	/^type System struct {$/;"	d
Terminate	system.go	/^func (s *System) Terminate() {$/;"	d
TestMove	sprite.go	/^func (s *Sprite) TestMove(dx float64, dy float64, r *Sprite) bool {$/;"	d
Text	scene.go	/^type Text struct {$/;"	d
Texture	texture.go	/^type Texture struct {$/;"	d
TiledLayer	map.go	/^type TiledLayer struct {$/;"	d
TiledMap	map.go	/^type TiledMap struct {$/;"	d
TiledTileset	map.go	/^type TiledTileset struct {$/;"	d
Unbind	framebuffer.go	/^func (fb *Framebuffer) Unbind() {$/;"	d
Unbind	texture.go	/^func (t *Texture) Unbind() {$/;"	d
Width	element.go	/^func (e *Element) Width() float64 {$/;"	d
Window	window.go	/^type Window struct {$/;"	d
X	element.go	/^func (e *Element) X() float64 {$/;"	d
Y	element.go	/^func (e *Element) Y() float64 {$/;"	d
Z	element.go	/^func (e *Element) Z() float64 {$/;"	d
Zoom	camera.go	/^func (c *Camera) Zoom(incr float64) {$/;"	d
bi	map.go	/^	var bi = 0$/;"	d
calcView	camera.go	/^func (c *Camera) calcView() bool {$/;"	d
clamp	system.go	/^func (s *System) clamp(i int, max int) gl.GLclampf {$/;"	d
cpuprofile	Makefile	/^	.\/example-basic -cpuprofile=$@$/;"	m
data	texture.go	/^	var data *bytes.Buffer$/;"	d
file	texture.go	/^	var file *os.File$/;"	d
init	examples/basic/main.go	/^func init() {$/;"	d
init	examples/complex/main.go	/^func init() {$/;"	d
main	examples/basic/main.go	/^func main() {$/;"	d
main	examples/complex/main.go	/^func main() {$/;"	d
memprofile	Makefile	/^	.\/example-basic -memprofile=$@$/;"	m
name	map.go	/^		var name = tm.Tilesets[j].Name$/;"	d
numblocks	map.go	/^	var numblocks = 0$/;"	d
red	scripts/setup_devel.sh	/^function red {$/;"	f
resize	system.go	/^func (s *System) resize() (err error) {$/;"	d
row	map.go	/^		var row, col int$/;"	d
texture	system.go	/^	var texture *Texture$/;"	d
yellow	scripts/setup_devel.sh	/^function yellow {$/;"	f
