!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Add	twodee.go	/^func (r Rectangle) Add(p Point) Rectangle {$/;"	f
AddChild	scene.go	/^func (e *Element) AddChild(node Node) {$/;"	f
Bind	twodee.go	/^func (t *Texture) Bind() {$/;"	f
Bounds	scene.go	/^func (e *Element) Bounds() Rectangle {$/;"	f
ByDepth	scene.go	/^type ByDepth []Node$/;"	t
Clear	scene.go	/^func (e *Element) Clear() {$/;"	f
CollidesWith	scene.go	/^func (s *Sprite) CollidesWith(sprite *Sprite) bool {$/;"	f
Draw	scene.go	/^func (e *Element) Draw() {$/;"	f
Draw	scene.go	/^func (s *Scene) Draw() {$/;"	f
Draw	scene.go	/^func (s *Sprite) Draw() {$/;"	f
Dx	twodee.go	/^func (r Rectangle) Dx() float32 {$/;"	f
Dy	twodee.go	/^func (r Rectangle) Dy() float32 {$/;"	f
Element	scene.go	/^type Element struct {$/;"	t
EncodeTGA	twodee.go	/^func EncodeTGA(name string, img image.Image) (buf *bytes.Buffer, err error) {$/;"	f
Env	scene.go	/^type Env struct {$/;"	t
EnvBlock	scene.go	/^type EnvBlock struct {$/;"	t
EnvBlockLoadedHandler	scene.go	/^type EnvBlockLoadedHandler func(block *EnvBlock, sprite *Sprite, x float32, y float32)$/;"	t
EnvOpts	scene.go	/^type EnvOpts struct {$/;"	t
GLInitFrameBuffer	opengl.go	/^func GLInitFrameBuffer() {$/;"	f
GetAllChildren	scene.go	/^func (e *Element) GetAllChildren() []Node {$/;"	f
GetGLTexture	opengl.go	/^func GetGLTexture(img image.Image, smoothing int) (gltexture gl.Texture, err error) {$/;"	f
GlobalBounds	scene.go	/^func (e *Element) GlobalBounds() Rectangle {$/;"	f
Height	scene.go	/^func (e *Element) Height() float32 {$/;"	f
Init	twodee.go	/^func Init() (sys *System, err error) {$/;"	f
IntLinear	constants.go	/^	IntLinear  = gl.LINEAR$/;"	c
IntNearest	constants.go	/^	IntNearest = gl.NEAREST$/;"	c
Key	twodee.go	/^func (s *System) Key(key int) int {$/;"	f
KeyBackspace	constants.go	/^	KeyBackspace$/;"	c
KeyCapslock	constants.go	/^	KeyCapslock$/;"	c
KeyDel	constants.go	/^	KeyDel$/;"	c
KeyDown	constants.go	/^	KeyDown$/;"	c
KeyEnd	constants.go	/^	KeyEnd$/;"	c
KeyEnter	constants.go	/^	KeyEnter$/;"	c
KeyEsc	constants.go	/^	KeyEsc$/;"	c
KeyF1	constants.go	/^	KeyF1$/;"	c
KeyF10	constants.go	/^	KeyF10$/;"	c
KeyF11	constants.go	/^	KeyF11$/;"	c
KeyF12	constants.go	/^	KeyF12$/;"	c
KeyF13	constants.go	/^	KeyF13$/;"	c
KeyF14	constants.go	/^	KeyF14$/;"	c
KeyF15	constants.go	/^	KeyF15$/;"	c
KeyF16	constants.go	/^	KeyF16$/;"	c
KeyF17	constants.go	/^	KeyF17$/;"	c
KeyF18	constants.go	/^	KeyF18$/;"	c
KeyF19	constants.go	/^	KeyF19$/;"	c
KeyF2	constants.go	/^	KeyF2$/;"	c
KeyF20	constants.go	/^	KeyF20$/;"	c
KeyF21	constants.go	/^	KeyF21$/;"	c
KeyF22	constants.go	/^	KeyF22$/;"	c
KeyF23	constants.go	/^	KeyF23$/;"	c
KeyF24	constants.go	/^	KeyF24$/;"	c
KeyF25	constants.go	/^	KeyF25$/;"	c
KeyF3	constants.go	/^	KeyF3$/;"	c
KeyF4	constants.go	/^	KeyF4$/;"	c
KeyF5	constants.go	/^	KeyF5$/;"	c
KeyF6	constants.go	/^	KeyF6$/;"	c
KeyF7	constants.go	/^	KeyF7$/;"	c
KeyF8	constants.go	/^	KeyF8$/;"	c
KeyF9	constants.go	/^	KeyF9$/;"	c
KeyHome	constants.go	/^	KeyHome$/;"	c
KeyInsert	constants.go	/^	KeyInsert$/;"	c
KeyKP0	constants.go	/^	KeyKP0$/;"	c
KeyKP1	constants.go	/^	KeyKP1$/;"	c
KeyKP2	constants.go	/^	KeyKP2$/;"	c
KeyKP3	constants.go	/^	KeyKP3$/;"	c
KeyKP4	constants.go	/^	KeyKP4$/;"	c
KeyKP5	constants.go	/^	KeyKP5$/;"	c
KeyKP6	constants.go	/^	KeyKP6$/;"	c
KeyKP7	constants.go	/^	KeyKP7$/;"	c
KeyKP8	constants.go	/^	KeyKP8$/;"	c
KeyKP9	constants.go	/^	KeyKP9$/;"	c
KeyKPAdd	constants.go	/^	KeyKPAdd$/;"	c
KeyKPDecimal	constants.go	/^	KeyKPDecimal$/;"	c
KeyKPDidivde	constants.go	/^	KeyKPDidivde$/;"	c
KeyKPEnter	constants.go	/^	KeyKPEnter$/;"	c
KeyKPEqual	constants.go	/^	KeyKPEqual$/;"	c
KeyKPMultiply	constants.go	/^	KeyKPMultiply$/;"	c
KeyKPNumlock	constants.go	/^	KeyKPNumlock$/;"	c
KeyKPSubtract	constants.go	/^	KeyKPSubtract$/;"	c
KeyLalt	constants.go	/^	KeyLalt$/;"	c
KeyLast	constants.go	/^	KeyLast = KeyMenu$/;"	c
KeyLctrl	constants.go	/^	KeyLctrl$/;"	c
KeyLeft	constants.go	/^	KeyLeft$/;"	c
KeyLshift	constants.go	/^	KeyLshift$/;"	c
KeyLsuper	constants.go	/^	KeyLsuper$/;"	c
KeyMenu	constants.go	/^	KeyMenu$/;"	c
KeyPagedown	constants.go	/^	KeyPagedown$/;"	c
KeyPageup	constants.go	/^	KeyPageup$/;"	c
KeyPause	constants.go	/^	KeyPause$/;"	c
KeyRalt	constants.go	/^	KeyRalt$/;"	c
KeyRctrl	constants.go	/^	KeyRctrl$/;"	c
KeyRight	constants.go	/^	KeyRight$/;"	c
KeyRshift	constants.go	/^	KeyRshift$/;"	c
KeyRsuper	constants.go	/^	KeyRsuper$/;"	c
KeyScrolllock	constants.go	/^	KeyScrolllock$/;"	c
KeySpace	constants.go	/^	KeySpace   = 32$/;"	c
KeySpecial	constants.go	/^	KeySpecial = 256$/;"	c
KeyTab	constants.go	/^	KeyTab$/;"	c
KeyUnknown	constants.go	/^	KeyUnknown = -1$/;"	c
KeyUp	constants.go	/^	KeyUp$/;"	c
Len	scene.go	/^func (s ByDepth) Len() int {$/;"	f
Less	scene.go	/^func (s ByDepth) Less(i int, j int) bool {$/;"	f
Load	scene.go	/^func (e *Env) Load(system *System, opts EnvOpts) (err error) {$/;"	f
LoadPNG	twodee.go	/^func LoadPNG(path string) (img image.Image, err error) {$/;"	f
LoadTexture	twodee.go	/^func (s *System) LoadTexture(name string, path string, inter int, width int) (err error) {$/;"	f
LoadTexture	twodee.go	/^func LoadTexture(path string, smoothing int, framewidth int) (texture *Texture, err error) {$/;"	f
LoadVarWidthTexture	twodee.go	/^func LoadVarWidthTexture(path string, smoothing int) (texture *Texture, err error) {$/;"	f
Move	scene.go	/^func (e *Element) Move(p Point) {$/;"	f
MoveTo	scene.go	/^func (e *Element) MoveTo(p Point) {$/;"	f
NewSprite	scene.go	/^func (s *System) NewSprite(name string, x float32, y float32, w int, h int, t int) *Sprite {$/;"	f
NewText	scene.go	/^func (s *System) NewText(name string, x float32, y float32, r int, text string) *Text {$/;"	f
Node	scene.go	/^type Node interface {$/;"	t
Open	twodee.go	/^func (s *System) Open(win *Window) (err error) {$/;"	f
Opened	twodee.go	/^func (w *Window) Opened() bool {$/;"	f
Overlaps	twodee.go	/^func (r Rectangle) Overlaps(s Rectangle) bool {$/;"	f
Paint	twodee.go	/^func (s *System) Paint(scene *Scene) {$/;"	f
Parent	scene.go	/^func (e *Element) Parent() Node {$/;"	f
Point	twodee.go	/^type Point struct {$/;"	t
PrintError	examples/basic/main.go	/^func PrintError(err error) {$/;"	f
Pt	twodee.go	/^func Pt(x float32, y float32) Point {$/;"	f
Rect	twodee.go	/^func Rect(x1 float32, y1 float32, x2 float32, y2 float32) Rectangle {$/;"	f
Rectangle	twodee.go	/^type Rectangle struct {$/;"	t
RelativeBounds	scene.go	/^func (e *Element) RelativeBounds(n Node) Rectangle {$/;"	f
RemoveChild	scene.go	/^func (e *Element) RemoveChild(node Node) {$/;"	f
Round	scene.go	/^func Round(a float32) float32 {$/;"	f
Scene	scene.go	/^type Scene struct {$/;"	t
SetBounds	scene.go	/^func (e *Element) SetBounds(r Rectangle) {$/;"	f
SetCharCallback	twodee.go	/^func (s *System) SetCharCallback(handler glfw.CharHandler) {$/;"	f
SetClearColor	twodee.go	/^func (s *System) SetClearColor(r int, g int, b int, a int) {$/;"	f
SetFrame	scene.go	/^func (s *Sprite) SetFrame(frame int) {$/;"	f
SetHeight	scene.go	/^func (e *Element) SetHeight(h float32) {$/;"	f
SetKeyCallback	twodee.go	/^func (s *System) SetKeyCallback(handler glfw.KeyHandler) {$/;"	f
SetParent	scene.go	/^func (e *Element) SetParent(node Node) {$/;"	f
SetText	scene.go	/^func (t *Text) SetText(text string) {$/;"	f
SetWidth	scene.go	/^func (e *Element) SetWidth(w float32) {$/;"	f
SetZ	scene.go	/^func (e *Element) SetZ(z float32) {$/;"	f
Size	twodee.go	/^func (r Rectangle) Size() Point {$/;"	f
Sprite	scene.go	/^type Sprite struct {$/;"	t
Sub	twodee.go	/^func (r Rectangle) Sub(p Point) Rectangle {$/;"	f
Swap	scene.go	/^func (s ByDepth) Swap(i int, j int) {$/;"	f
System	twodee.go	/^type System struct {$/;"	t
Terminate	twodee.go	/^func (s *System) Terminate() {$/;"	f
TestMove	scene.go	/^func (s *Sprite) TestMove(dx float32, dy float32, r *Sprite) bool {$/;"	f
Text	scene.go	/^type Text struct {$/;"	t
Texture	twodee.go	/^type Texture struct {$/;"	t
Unbind	twodee.go	/^func (t *Texture) Unbind() {$/;"	f
Width	scene.go	/^func (e *Element) Width() float32 {$/;"	f
Window	twodee.go	/^type Window struct {$/;"	t
X	scene.go	/^func (e *Element) X() float32 {$/;"	f
Y	scene.go	/^func (e *Element) Y() float32 {$/;"	f
Z	scene.go	/^func (e *Element) Z() float32 {$/;"	f
_	constants.go	/^	_ = (KeySpecial + iota)$/;"	c
clamp	twodee.go	/^func (s *System) clamp(i int, max int) gl.GLclampf {$/;"	f
cpuprofile	Makefile	/^	.\/example-basic -cpuprofile=$@$/;"	m
main	examples/basic/main.go	/^func main() {$/;"	f
main	examples/basic/main.go	/^package main$/;"	p
memprofile	Makefile	/^	.\/example-basic -memprofile=$@$/;"	m
red	scripts/setup_devel.sh	/^function red {$/;"	f
setProjection	twodee.go	/^func (s *System) setProjection(win *Window) {$/;"	f
twodee	constants.go	/^package twodee$/;"	p
twodee	opengl.go	/^package twodee$/;"	p
twodee	scene.go	/^package twodee$/;"	p
twodee	twodee.go	/^package twodee$/;"	p
yellow	scripts/setup_devel.sh	/^function yellow {$/;"	f
